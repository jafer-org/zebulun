/*
 * $Source$
 * $Date$
 * $Revision$
 *
 * Copyright (C) 1998, Hoylen Sue.  All Rights Reserved.
 * <h.sue@ieee.org>
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Refer to
 * the supplied license for more details.
 *
 * Generated by Zebulun ASN1tojava: 1998-09-08 03:15:23 UTC
 */

//----------------------------------------------------------------

package z3950.RS_generic;
import asn1.*;
import z3950.v3.IntUnit;
import z3950.v3.InternationalString;
import z3950.v3.StringOrNumeric;
import z3950.v3.Term;
import z3950.v3.Unit;

//================================================================
/**
 * Class for representing a <code>ElementData</code> from <code>RecordSyntax-generic</code>
 *
 * <pre>
 * ElementData ::=
 * CHOICE {
 *   octets OCTET STRING
 *   numeric INTEGER
 *   date GeneralizedTime
 *   ext EXTERNAL
 *   string InternationalString
 *   trueOrFalse BOOLEAN
 *   oid OBJECT IDENTIFIER
 *   intUnit [1] IMPLICIT IntUnit
 *   elementNotThere [2] IMPLICIT NULL
 *   elementEmpty [3] IMPLICIT NULL
 *   noDataRequested [4] IMPLICIT NULL
 *   diagnostic [5] IMPLICIT EXTERNAL
 *   subtree [6] EXPLICIT SEQUENCE OF TaggedElement
 * }
 * </pre>
 *
 * @version	$Release$ $Date$
 */

//----------------------------------------------------------------

public final class ElementData extends ASN1Any
{

  public final static String VERSION = "Copyright (C) Hoylen Sue, 1998. 199809080315Z";

//----------------------------------------------------------------
/**
 * Default constructor for a ElementData.
 */

public
ElementData()
{
}

//----------------------------------------------------------------
/**
 * Constructor for a ElementData from a BER encoding.
 * <p>
 *
 * @param ber the BER encoding.
 * @param check_tag will check tag if true, use false
 *         if the BER has been implicitly tagged. You should
 *         usually be passing true.
 * @exception	ASN1Exception if the BER encoding is bad.
 */

public
ElementData(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  super(ber, check_tag);
}

//----------------------------------------------------------------
/**
 * Initializing object from a BER encoding.
 * This method is for internal use only. You should use
 * the constructor that takes a BEREncoding.
 *
 * @param ber the BER to decode.
 * @param check_tag if the tag should be checked.
 * @exception ASN1Exception if the BER encoding is bad.
 */

public void
ber_decode(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  BERConstructed tagwrapper;

  // Null out all choices

  c_octets = null;
  c_numeric = null;
  c_date = null;
  c_ext = null;
  c_string = null;
  c_trueOrFalse = null;
  c_oid = null;
  c_intUnit = null;
  c_elementNotThere = null;
  c_elementEmpty = null;
  c_noDataRequested = null;
  c_diagnostic = null;
  c_subtree = null;

  // Try choice octets
  try {
    c_octets = new ASN1OctetString(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice numeric
  try {
    c_numeric = new ASN1Integer(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice date
  try {
    c_date = new ASN1GeneralizedTime(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice ext
  try {
    c_ext = new ASN1External(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice string
  try {
    c_string = new InternationalString(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice trueOrFalse
  try {
    c_trueOrFalse = new ASN1Boolean(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice oid
  try {
    c_oid = new ASN1ObjectIdentifier(ber, check_tag);
    return;
  } catch (ASN1Exception e) {
    // failed to decode, continue on
  }

  // Try choice intUnit
  if (ber.tag_get() == 1 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_intUnit = new IntUnit(ber, false);
    return;
  }

  // Try choice elementNotThere
  if (ber.tag_get() == 2 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_elementNotThere = new ASN1Null(ber, false);
    return;
  }

  // Try choice elementEmpty
  if (ber.tag_get() == 3 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_elementEmpty = new ASN1Null(ber, false);
    return;
  }

  // Try choice noDataRequested
  if (ber.tag_get() == 4 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_noDataRequested = new ASN1Null(ber, false);
    return;
  }

  // Try choice diagnostic
  if (ber.tag_get() == 5 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_diagnostic = new ASN1External(ber, false);
    return;
  }

  // Try choice subtree
  if (ber.tag_get() == 6 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    BEREncoding ber_data;
    try {
      tagwrapper = (BERConstructed) ber;
    } catch (ClassCastException e) {
      throw new ASN1EncodingException
        ("Zebulun ElementData: bad BER form\n");
    }
    if (tagwrapper.number_components() != 1)
      throw new ASN1EncodingException
        ("Zebulun ElementData: bad BER form\n");
    ber_data = tagwrapper.elementAt(0);
    BERConstructed ber_cons;
    try {
      ber_cons = (BERConstructed) ber_data;
    } catch (ClassCastException e) {
      throw new ASN1EncodingException
        ("Zebulun ElementData: bad BER form\n");
    }

    int num_parts = ber_cons.number_components();
    int p;

    c_subtree = new TaggedElement[num_parts];

    for (p = 0; p < num_parts; p++) {
      c_subtree[p] = new TaggedElement(ber_cons.elementAt(p), true);
    }
    return;
  }

  throw new ASN1Exception("Zebulun ElementData: bad BER encoding: choice not matched");
}

//----------------------------------------------------------------
/**
 * Returns a BER encoding of ElementData.
 *
 * @return	The BER encoding.
 * @exception	ASN1Exception Invalid or cannot be encoded.
 */

public BEREncoding
ber_encode()
       throws ASN1Exception
{
  BEREncoding chosen = null;

  BEREncoding f2[];
  int p;
  BEREncoding enc[];

  // Encoding choice: c_octets
  if (c_octets != null) {
  chosen = c_octets.ber_encode();
  }

  // Encoding choice: c_numeric
  if (c_numeric != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_numeric.ber_encode();
  }

  // Encoding choice: c_date
  if (c_date != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_date.ber_encode();
  }

  // Encoding choice: c_ext
  if (c_ext != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_ext.ber_encode();
  }

  // Encoding choice: c_string
  if (c_string != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_string.ber_encode();
  }

  // Encoding choice: c_trueOrFalse
  if (c_trueOrFalse != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_trueOrFalse.ber_encode();
  }

  // Encoding choice: c_oid
  if (c_oid != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  chosen = c_oid.ber_encode();
  }

  // Encoding choice: c_intUnit
  if (c_intUnit != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_intUnit.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 1);
  }

  // Encoding choice: c_elementNotThere
  if (c_elementNotThere != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_elementNotThere.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 2);
  }

  // Encoding choice: c_elementEmpty
  if (c_elementEmpty != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_elementEmpty.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 3);
  }

  // Encoding choice: c_noDataRequested
  if (c_noDataRequested != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_noDataRequested.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 4);
  }

  // Encoding choice: c_diagnostic
  if (c_diagnostic != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_diagnostic.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 5);
  }

  // Encoding choice: c_subtree
  if (c_subtree != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
  enc = new BEREncoding[1];
  f2 = new BEREncoding[c_subtree.length];

  for (p = 0; p < c_subtree.length; p++) {
    f2[p] = c_subtree[p].ber_encode();
  }

    enc[0] = new BERConstructed(BEREncoding.UNIVERSAL_TAG, ASN1Sequence.TAG, f2);
    chosen = new BERConstructed(BEREncoding.CONTEXT_SPECIFIC_TAG, 6, enc);
  }

  // Check for error of having none of the choices set
  if (chosen == null)
    throw new ASN1Exception("CHOICE not set");

  return chosen;
}

//----------------------------------------------------------------

/**
 * Generating a BER encoding of the object
 * and implicitly tagging it.
 * <p>
 * This method is for internal use only. You should use
 * the ber_encode method that does not take a parameter.
 * <p>
 * This function should never be used, because this
 * production is a CHOICE.
 * It must never have an implicit tag.
 * <p>
 * An exception will be thrown if it is called.
 *
 * @param tag_type the type of the tag.
 * @param tag the tag.
 * @exception ASN1Exception if it cannot be BER encoded.
 */

public BEREncoding
ber_encode(int tag_type, int tag)
       throws ASN1Exception
{
  // This method must not be called!

  // Method is not available because this is a basic CHOICE
  // which does not have an explicit tag on it. So it is not
  // permitted to allow something else to apply an implicit
  // tag on it, otherwise the tag identifying which CHOICE
  // it is will be overwritten and lost.

  throw new ASN1EncodingException("Zebulun ElementData: cannot implicitly tag");
}

//----------------------------------------------------------------
/**
 * Returns a new String object containing a text representing
 * of the ElementData. 
 */

public String
toString()
{
  int p;
  StringBuffer str = new StringBuffer("{");

  boolean found = false;

  if (c_octets != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: octets> ");
    found = true;
    str.append("octets ");
  str.append(c_octets);
  }

  if (c_numeric != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: numeric> ");
    found = true;
    str.append("numeric ");
  str.append(c_numeric);
  }

  if (c_date != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: date> ");
    found = true;
    str.append("date ");
  str.append(c_date);
  }

  if (c_ext != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: ext> ");
    found = true;
    str.append("ext ");
  str.append(c_ext);
  }

  if (c_string != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: string> ");
    found = true;
    str.append("string ");
  str.append(c_string);
  }

  if (c_trueOrFalse != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: trueOrFalse> ");
    found = true;
    str.append("trueOrFalse ");
  str.append(c_trueOrFalse);
  }

  if (c_oid != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: oid> ");
    found = true;
    str.append("oid ");
  str.append(c_oid);
  }

  if (c_intUnit != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: intUnit> ");
    found = true;
    str.append("intUnit ");
  str.append(c_intUnit);
  }

  if (c_elementNotThere != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: elementNotThere> ");
    found = true;
    str.append("elementNotThere ");
  str.append(c_elementNotThere);
  }

  if (c_elementEmpty != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: elementEmpty> ");
    found = true;
    str.append("elementEmpty ");
  str.append(c_elementEmpty);
  }

  if (c_noDataRequested != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: noDataRequested> ");
    found = true;
    str.append("noDataRequested ");
  str.append(c_noDataRequested);
  }

  if (c_diagnostic != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: diagnostic> ");
    found = true;
    str.append("diagnostic ");
  str.append(c_diagnostic);
  }

  if (c_subtree != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: subtree> ");
    found = true;
    str.append("subtree ");
  str.append("{");
  for (p = 0; p < c_subtree.length; p++) {
    str.append(c_subtree[p]);
  }
  str.append("}");
  }

  str.append("}");

  return str.toString();
}

//----------------------------------------------------------------
/*
 * Internal variables for class.
 */

public ASN1OctetString c_octets;
public ASN1Integer c_numeric;
public ASN1GeneralizedTime c_date;
public ASN1External c_ext;
public InternationalString c_string;
public ASN1Boolean c_trueOrFalse;
public ASN1ObjectIdentifier c_oid;
public IntUnit c_intUnit;
public ASN1Null c_elementNotThere;
public ASN1Null c_elementEmpty;
public ASN1Null c_noDataRequested;
public ASN1External c_diagnostic;
public TaggedElement c_subtree[];

} // ElementData

//----------------------------------------------------------------
//EOF
