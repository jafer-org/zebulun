/*
 * $Source$
 * $Date$
 * $Revision$
 *
 * Copyright (C) 1998, Hoylen Sue.  All Rights Reserved.
 * <h.sue@ieee.org>
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Refer to
 * the supplied license for more details.
 *
 * Generated by Zebulun ASN1tojava: 1998-09-08 03:15:24 UTC
 */

//----------------------------------------------------------------

package z3950.RS_ESTaskPackage;
import asn1.*;
import z3950.v3.DiagRec;
import z3950.v3.IntUnit;
import z3950.v3.InternationalString;
import z3950.v3.Permissions;

//================================================================
/**
 * Class for representing a <code>TaskPackage</code> from <code>RecordSyntax-ESTaskPackage</code>
 *
 * <pre>
 * TaskPackage ::=
 * SEQUENCE {
 *   packageType [1] IMPLICIT OBJECT IDENTIFIER
 *   packageName [2] IMPLICIT InternationalString OPTIONAL
 *   userId [3] IMPLICIT InternationalString OPTIONAL
 *   retentionTime [4] IMPLICIT IntUnit OPTIONAL
 *   permissions [5] IMPLICIT Permissions OPTIONAL
 *   description [6] IMPLICIT InternationalString OPTIONAL
 *   targetReference [7] IMPLICIT OCTET STRING OPTIONAL
 *   creationDateTime [8] IMPLICIT GeneralizedTime OPTIONAL
 *   taskStatus [9] IMPLICIT INTEGER
 *   packageDiagnostics [10] IMPLICIT SEQUENCE OF DiagRec OPTIONAL
 *   taskSpecificParameters [11] IMPLICIT EXTERNAL
 * }
 * </pre>
 *
 * @version	$Release$ $Date$
 */

//----------------------------------------------------------------

public final class TaskPackage extends ASN1Any
{

  public final static String VERSION = "Copyright (C) Hoylen Sue, 1998. 199809080315Z";

//----------------------------------------------------------------
/**
 * Default constructor for a TaskPackage.
 */

public
TaskPackage()
{
}

//----------------------------------------------------------------
/**
 * Constructor for a TaskPackage from a BER encoding.
 * <p>
 *
 * @param ber the BER encoding.
 * @param check_tag will check tag if true, use false
 *         if the BER has been implicitly tagged. You should
 *         usually be passing true.
 * @exception	ASN1Exception if the BER encoding is bad.
 */

public
TaskPackage(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  super(ber, check_tag);
}

//----------------------------------------------------------------
/**
 * Initializing object from a BER encoding.
 * This method is for internal use only. You should use
 * the constructor that takes a BEREncoding.
 *
 * @param ber the BER to decode.
 * @param check_tag if the tag should be checked.
 * @exception ASN1Exception if the BER encoding is bad.
 */

public void
ber_decode(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  // TaskPackage should be encoded by a constructed BER

  BERConstructed ber_cons;
  try {
    ber_cons = (BERConstructed) ber;
  } catch (ClassCastException e) {
    throw new ASN1EncodingException
      ("Zebulun TaskPackage: bad BER form\n");
  }

  // Prepare to decode the components

  int num_parts = ber_cons.number_components();
  int part = 0;
  BEREncoding p;

  // Decoding: packageType [1] IMPLICIT OBJECT IDENTIFIER

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() != 1 ||
      p.tag_type_get() != BEREncoding.CONTEXT_SPECIFIC_TAG)
    throw new ASN1EncodingException
      ("Zebulun TaskPackage: bad tag in s_packageType\n");

  s_packageType = new ASN1ObjectIdentifier(p, false);
  part++;

  // Decoding: packageName [2] IMPLICIT InternationalString OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 2 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_packageName = new InternationalString(p, false);
    part++;
  }

  // Decoding: userId [3] IMPLICIT InternationalString OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 3 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_userId = new InternationalString(p, false);
    part++;
  }

  // Decoding: retentionTime [4] IMPLICIT IntUnit OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 4 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_retentionTime = new IntUnit(p, false);
    part++;
  }

  // Decoding: permissions [5] IMPLICIT Permissions OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 5 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_permissions = new Permissions(p, false);
    part++;
  }

  // Decoding: description [6] IMPLICIT InternationalString OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 6 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_description = new InternationalString(p, false);
    part++;
  }

  // Decoding: targetReference [7] IMPLICIT OCTET STRING OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 7 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_targetReference = new ASN1OctetString(p, false);
    part++;
  }

  // Decoding: creationDateTime [8] IMPLICIT GeneralizedTime OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 8 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    s_creationDateTime = new ASN1GeneralizedTime(p, false);
    part++;
  }

  // Decoding: taskStatus [9] IMPLICIT INTEGER

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() != 9 ||
      p.tag_type_get() != BEREncoding.CONTEXT_SPECIFIC_TAG)
    throw new ASN1EncodingException
      ("Zebulun TaskPackage: bad tag in s_taskStatus\n");

  s_taskStatus = new ASN1Integer(p, false);
  part++;

  // Decoding: packageDiagnostics [10] IMPLICIT SEQUENCE OF DiagRec OPTIONAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() == 10 &&
      p.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    try {
      BERConstructed cons = (BERConstructed) p;
      int parts = cons.number_components();
      s_packageDiagnostics = new DiagRec[parts];
      int n;
      for (n = 0; n < parts; n++) {
        s_packageDiagnostics[n] = new DiagRec(cons.elementAt(n), true);
      }
    } catch (ClassCastException e) {
      throw new ASN1EncodingException("Bad BER");
    }
    part++;
  }

  // Decoding: taskSpecificParameters [11] IMPLICIT EXTERNAL

  if (num_parts <= part) {
    // End of record, but still more elements to get
    throw new ASN1Exception("Zebulun TaskPackage: incomplete");
  }
  p = ber_cons.elementAt(part);

  if (p.tag_get() != 11 ||
      p.tag_type_get() != BEREncoding.CONTEXT_SPECIFIC_TAG)
    throw new ASN1EncodingException
      ("Zebulun TaskPackage: bad tag in s_taskSpecificParameters\n");

  s_taskSpecificParameters = new ASN1External(p, false);
  part++;

  // Should not be any more parts

  if (part < num_parts) {
    throw new ASN1Exception("Zebulun TaskPackage: bad BER: extra data " + part + "/" + num_parts + " processed");
  }
}

//----------------------------------------------------------------
/**
 * Returns a BER encoding of the TaskPackage.
 *
 * @exception	ASN1Exception Invalid or cannot be encoded.
 * @return	The BER encoding.
 */

public BEREncoding
ber_encode()
       throws ASN1Exception
{
  return ber_encode(BEREncoding.UNIVERSAL_TAG, ASN1Sequence.TAG);
}

//----------------------------------------------------------------
/**
 * Returns a BER encoding of TaskPackage, implicitly tagged.
 *
 * @param tag_type	The type of the implicit tag.
 * @param tag	The implicit tag.
 * @return	The BER encoding of the object.
 * @exception	ASN1Exception When invalid or cannot be encoded.
 * @see asn1.BEREncoding#UNIVERSAL_TAG
 * @see asn1.BEREncoding#APPLICATION_TAG
 * @see asn1.BEREncoding#CONTEXT_SPECIFIC_TAG
 * @see asn1.BEREncoding#PRIVATE_TAG
 */

public BEREncoding
ber_encode(int tag_type, int tag)
       throws ASN1Exception
{
  // Calculate the number of fields in the encoding

  int num_fields = 3; // number of mandatories
  if (s_packageName != null)
    num_fields++;
  if (s_userId != null)
    num_fields++;
  if (s_retentionTime != null)
    num_fields++;
  if (s_permissions != null)
    num_fields++;
  if (s_description != null)
    num_fields++;
  if (s_targetReference != null)
    num_fields++;
  if (s_creationDateTime != null)
    num_fields++;
  if (s_packageDiagnostics != null)
    num_fields++;

  // Encode it

  BEREncoding fields[] = new BEREncoding[num_fields];
  int x = 0;
  BEREncoding f2[];
  int p;

  // Encoding s_packageType: OBJECT IDENTIFIER 

  fields[x++] = s_packageType.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 1);

  // Encoding s_packageName: InternationalString OPTIONAL

  if (s_packageName != null) {
    fields[x++] = s_packageName.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 2);
  }

  // Encoding s_userId: InternationalString OPTIONAL

  if (s_userId != null) {
    fields[x++] = s_userId.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 3);
  }

  // Encoding s_retentionTime: IntUnit OPTIONAL

  if (s_retentionTime != null) {
    fields[x++] = s_retentionTime.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 4);
  }

  // Encoding s_permissions: Permissions OPTIONAL

  if (s_permissions != null) {
    fields[x++] = s_permissions.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 5);
  }

  // Encoding s_description: InternationalString OPTIONAL

  if (s_description != null) {
    fields[x++] = s_description.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 6);
  }

  // Encoding s_targetReference: OCTET STRING OPTIONAL

  if (s_targetReference != null) {
    fields[x++] = s_targetReference.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 7);
  }

  // Encoding s_creationDateTime: GeneralizedTime OPTIONAL

  if (s_creationDateTime != null) {
    fields[x++] = s_creationDateTime.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 8);
  }

  // Encoding s_taskStatus: INTEGER 

  fields[x++] = s_taskStatus.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 9);

  // Encoding s_packageDiagnostics: SEQUENCE OF OPTIONAL

  if (s_packageDiagnostics != null) {
    f2 = new BEREncoding[s_packageDiagnostics.length];

    for (p = 0; p < s_packageDiagnostics.length; p++) {
      f2[p] = s_packageDiagnostics[p].ber_encode();
    }

    fields[x++] = new BERConstructed(BEREncoding.CONTEXT_SPECIFIC_TAG, 10, f2);
  }

  // Encoding s_taskSpecificParameters: EXTERNAL 

  fields[x++] = s_taskSpecificParameters.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 11);

  return new BERConstructed(tag_type, tag, fields);
}

//----------------------------------------------------------------
/**
 * Returns a new String object containing a text representing
 * of the TaskPackage. 
 */

public String
toString()
{
  int p;
  StringBuffer str = new StringBuffer("{");
  int outputted = 0;

  str.append("packageType ");
  str.append(s_packageType);
  outputted++;

  if (s_packageName != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("packageName ");
    str.append(s_packageName);
    outputted++;
  }

  if (s_userId != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("userId ");
    str.append(s_userId);
    outputted++;
  }

  if (s_retentionTime != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("retentionTime ");
    str.append(s_retentionTime);
    outputted++;
  }

  if (s_permissions != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("permissions ");
    str.append(s_permissions);
    outputted++;
  }

  if (s_description != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("description ");
    str.append(s_description);
    outputted++;
  }

  if (s_targetReference != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("targetReference ");
    str.append(s_targetReference);
    outputted++;
  }

  if (s_creationDateTime != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("creationDateTime ");
    str.append(s_creationDateTime);
    outputted++;
  }

  if (0 < outputted)
    str.append(", ");
  str.append("taskStatus ");
  str.append(s_taskStatus);
  outputted++;

  if (s_packageDiagnostics != null) {
    if (0 < outputted)
    str.append(", ");
    str.append("packageDiagnostics ");
    str.append("{");
    for (p = 0; p < s_packageDiagnostics.length; p++) {
      if (p != 0)
        str.append(", ");
      str.append(s_packageDiagnostics[p]);
    }
    str.append("}");
    outputted++;
  }

  if (0 < outputted)
    str.append(", ");
  str.append("taskSpecificParameters ");
  str.append(s_taskSpecificParameters);
  outputted++;

  str.append("}");

  return str.toString();
}

//----------------------------------------------------------------
/*
 * Internal variables for class.
 */

public ASN1ObjectIdentifier s_packageType;
public InternationalString s_packageName; // optional
public InternationalString s_userId; // optional
public IntUnit s_retentionTime; // optional
public Permissions s_permissions; // optional
public InternationalString s_description; // optional
public ASN1OctetString s_targetReference; // optional
public ASN1GeneralizedTime s_creationDateTime; // optional
public ASN1Integer s_taskStatus;
public DiagRec s_packageDiagnostics[]; // optional
public ASN1External s_taskSpecificParameters;

//----------------------------------------------------------------
/*
 * Enumerated constants for class.
 */

// Enumerated constants for taskStatus
public static final int E_pending = 0;
public static final int E_active = 1;
public static final int E_complete = 2;
public static final int E_aborted = 3;

} // TaskPackage

//----------------------------------------------------------------
//EOF
