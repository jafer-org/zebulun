/*
 * $Source$
 * $Date$
 * $Revision$
 *
 * Copyright (C) 1998, Hoylen Sue.  All Rights Reserved.
 * <h.sue@ieee.org>
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Refer to
 * the supplied license for more details.
 *
 * Generated by Zebulun ASN1tojava: 1998-09-08 03:15:12 UTC
 */

//----------------------------------------------------------------

package z3950.DiagFormat;
import asn1.*;
import z3950.v3.AttributeList;
import z3950.v3.DatabaseName;
import z3950.v3.DefaultDiagFormat;
import z3950.v3.InternationalString;
import z3950.v3.SortElement;
import z3950.v3.Specification;
import z3950.v3.Term;

//================================================================
/**
 * Class for representing a <code>DiagFormat_sort</code> from <code>DiagnosticFormatDiag1</code>
 *
 * <pre>
 * DiagFormat_sort ::=
 * CHOICE {
 *   sequence [0] IMPLICIT NULL
 *   noRsName [1] IMPLICIT NULL
 *   tooMany [2] IMPLICIT INTEGER
 *   incompatible [3] IMPLICIT NULL
 *   generic [4] IMPLICIT NULL
 *   dbSpecific [5] IMPLICIT NULL
 *   sortElement [6] EXPLICIT SortElement
 *   key [7] IMPLICIT INTEGER
 *   action [8] IMPLICIT NULL
 *   illegal [9] IMPLICIT INTEGER
 *   inputTooLarge [10] IMPLICIT SEQUENCE OF InternationalString
 *   aggregateTooLarge [11] IMPLICIT NULL
 * }
 * </pre>
 *
 * @version	$Release$ $Date$
 */

//----------------------------------------------------------------

public final class DiagFormat_sort extends ASN1Any
{

  public final static String VERSION = "Copyright (C) Hoylen Sue, 1998. 199809080315Z";

//----------------------------------------------------------------
/**
 * Default constructor for a DiagFormat_sort.
 */

public
DiagFormat_sort()
{
}

//----------------------------------------------------------------
/**
 * Constructor for a DiagFormat_sort from a BER encoding.
 * <p>
 *
 * @param ber the BER encoding.
 * @param check_tag will check tag if true, use false
 *         if the BER has been implicitly tagged. You should
 *         usually be passing true.
 * @exception	ASN1Exception if the BER encoding is bad.
 */

public
DiagFormat_sort(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  super(ber, check_tag);
}

//----------------------------------------------------------------
/**
 * Initializing object from a BER encoding.
 * This method is for internal use only. You should use
 * the constructor that takes a BEREncoding.
 *
 * @param ber the BER to decode.
 * @param check_tag if the tag should be checked.
 * @exception ASN1Exception if the BER encoding is bad.
 */

public void
ber_decode(BEREncoding ber, boolean check_tag)
       throws ASN1Exception
{
  BERConstructed tagwrapper;

  // Null out all choices

  c_sequence = null;
  c_noRsName = null;
  c_tooMany = null;
  c_incompatible = null;
  c_generic = null;
  c_dbSpecific = null;
  c_sortElement = null;
  c_key = null;
  c_action = null;
  c_illegal = null;
  c_inputTooLarge = null;
  c_aggregateTooLarge = null;

  // Try choice sequence
  if (ber.tag_get() == 0 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_sequence = new ASN1Null(ber, false);
    return;
  }

  // Try choice noRsName
  if (ber.tag_get() == 1 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_noRsName = new ASN1Null(ber, false);
    return;
  }

  // Try choice tooMany
  if (ber.tag_get() == 2 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_tooMany = new ASN1Integer(ber, false);
    return;
  }

  // Try choice incompatible
  if (ber.tag_get() == 3 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_incompatible = new ASN1Null(ber, false);
    return;
  }

  // Try choice generic
  if (ber.tag_get() == 4 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_generic = new ASN1Null(ber, false);
    return;
  }

  // Try choice dbSpecific
  if (ber.tag_get() == 5 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_dbSpecific = new ASN1Null(ber, false);
    return;
  }

  // Try choice sortElement
  if (ber.tag_get() == 6 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    try {
      tagwrapper = (BERConstructed) ber;
    } catch (ClassCastException e) {
      throw new ASN1EncodingException
        ("Zebulun DiagFormat_sort: bad BER form\n");
    }
    if (tagwrapper.number_components() != 1)
      throw new ASN1EncodingException
        ("Zebulun DiagFormat_sort: bad BER form\n");
    c_sortElement = new SortElement(tagwrapper.elementAt(0), true);
    return;
  }

  // Try choice key
  if (ber.tag_get() == 7 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_key = new ASN1Integer(ber, false);
    return;
  }

  // Try choice action
  if (ber.tag_get() == 8 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_action = new ASN1Null(ber, false);
    return;
  }

  // Try choice illegal
  if (ber.tag_get() == 9 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_illegal = new ASN1Integer(ber, false);
    return;
  }

  // Try choice inputTooLarge
  if (ber.tag_get() == 10 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    BEREncoding ber_data;
    ber_data = ber;
    BERConstructed ber_cons;
    try {
      ber_cons = (BERConstructed) ber_data;
    } catch (ClassCastException e) {
      throw new ASN1EncodingException
        ("Zebulun DiagFormat_sort: bad BER form\n");
    }

    int num_parts = ber_cons.number_components();
    int p;

    c_inputTooLarge = new InternationalString[num_parts];

    for (p = 0; p < num_parts; p++) {
      c_inputTooLarge[p] = new InternationalString(ber_cons.elementAt(p), true);
    }
    return;
  }

  // Try choice aggregateTooLarge
  if (ber.tag_get() == 11 &&
      ber.tag_type_get() == BEREncoding.CONTEXT_SPECIFIC_TAG) {
    c_aggregateTooLarge = new ASN1Null(ber, false);
    return;
  }

  throw new ASN1Exception("Zebulun DiagFormat_sort: bad BER encoding: choice not matched");
}

//----------------------------------------------------------------
/**
 * Returns a BER encoding of DiagFormat_sort.
 *
 * @return	The BER encoding.
 * @exception	ASN1Exception Invalid or cannot be encoded.
 */

public BEREncoding
ber_encode()
       throws ASN1Exception
{
  BEREncoding chosen = null;

  BEREncoding f2[];
  int p;
  BEREncoding enc[];

  // Encoding choice: c_sequence
  if (c_sequence != null) {
    chosen = c_sequence.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 0);
  }

  // Encoding choice: c_noRsName
  if (c_noRsName != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_noRsName.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 1);
  }

  // Encoding choice: c_tooMany
  if (c_tooMany != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_tooMany.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 2);
  }

  // Encoding choice: c_incompatible
  if (c_incompatible != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_incompatible.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 3);
  }

  // Encoding choice: c_generic
  if (c_generic != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_generic.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 4);
  }

  // Encoding choice: c_dbSpecific
  if (c_dbSpecific != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_dbSpecific.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 5);
  }

  // Encoding choice: c_sortElement
  if (c_sortElement != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    enc = new BEREncoding[1];
    enc[0] = c_sortElement.ber_encode();
    chosen = new BERConstructed(BEREncoding.CONTEXT_SPECIFIC_TAG, 6, enc);
  }

  // Encoding choice: c_key
  if (c_key != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_key.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 7);
  }

  // Encoding choice: c_action
  if (c_action != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_action.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 8);
  }

  // Encoding choice: c_illegal
  if (c_illegal != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_illegal.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 9);
  }

  // Encoding choice: c_inputTooLarge
  if (c_inputTooLarge != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    f2 = new BEREncoding[c_inputTooLarge.length];

    for (p = 0; p < c_inputTooLarge.length; p++) {
      f2[p] = c_inputTooLarge[p].ber_encode();
    }

    chosen = new BERConstructed(BEREncoding.CONTEXT_SPECIFIC_TAG, 10, f2);
  }

  // Encoding choice: c_aggregateTooLarge
  if (c_aggregateTooLarge != null) {
    if (chosen != null)
      throw new ASN1Exception("CHOICE multiply set");
    chosen = c_aggregateTooLarge.ber_encode(BEREncoding.CONTEXT_SPECIFIC_TAG, 11);
  }

  // Check for error of having none of the choices set
  if (chosen == null)
    throw new ASN1Exception("CHOICE not set");

  return chosen;
}

//----------------------------------------------------------------

/**
 * Generating a BER encoding of the object
 * and implicitly tagging it.
 * <p>
 * This method is for internal use only. You should use
 * the ber_encode method that does not take a parameter.
 * <p>
 * This function should never be used, because this
 * production is a CHOICE.
 * It must never have an implicit tag.
 * <p>
 * An exception will be thrown if it is called.
 *
 * @param tag_type the type of the tag.
 * @param tag the tag.
 * @exception ASN1Exception if it cannot be BER encoded.
 */

public BEREncoding
ber_encode(int tag_type, int tag)
       throws ASN1Exception
{
  // This method must not be called!

  // Method is not available because this is a basic CHOICE
  // which does not have an explicit tag on it. So it is not
  // permitted to allow something else to apply an implicit
  // tag on it, otherwise the tag identifying which CHOICE
  // it is will be overwritten and lost.

  throw new ASN1EncodingException("Zebulun DiagFormat_sort: cannot implicitly tag");
}

//----------------------------------------------------------------
/**
 * Returns a new String object containing a text representing
 * of the DiagFormat_sort. 
 */

public String
toString()
{
  int p;
  StringBuffer str = new StringBuffer("{");

  boolean found = false;

  if (c_sequence != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: sequence> ");
    found = true;
    str.append("sequence ");
  str.append(c_sequence);
  }

  if (c_noRsName != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: noRsName> ");
    found = true;
    str.append("noRsName ");
  str.append(c_noRsName);
  }

  if (c_tooMany != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: tooMany> ");
    found = true;
    str.append("tooMany ");
  str.append(c_tooMany);
  }

  if (c_incompatible != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: incompatible> ");
    found = true;
    str.append("incompatible ");
  str.append(c_incompatible);
  }

  if (c_generic != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: generic> ");
    found = true;
    str.append("generic ");
  str.append(c_generic);
  }

  if (c_dbSpecific != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: dbSpecific> ");
    found = true;
    str.append("dbSpecific ");
  str.append(c_dbSpecific);
  }

  if (c_sortElement != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: sortElement> ");
    found = true;
    str.append("sortElement ");
  str.append(c_sortElement);
  }

  if (c_key != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: key> ");
    found = true;
    str.append("key ");
  str.append(c_key);
  }

  if (c_action != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: action> ");
    found = true;
    str.append("action ");
  str.append(c_action);
  }

  if (c_illegal != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: illegal> ");
    found = true;
    str.append("illegal ");
  str.append(c_illegal);
  }

  if (c_inputTooLarge != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: inputTooLarge> ");
    found = true;
    str.append("inputTooLarge ");
  str.append("{");
  for (p = 0; p < c_inputTooLarge.length; p++) {
    str.append(c_inputTooLarge[p]);
  }
  str.append("}");
  }

  if (c_aggregateTooLarge != null) {
    if (found)
      str.append("<ERROR: multiple CHOICE: aggregateTooLarge> ");
    found = true;
    str.append("aggregateTooLarge ");
  str.append(c_aggregateTooLarge);
  }

  str.append("}");

  return str.toString();
}

//----------------------------------------------------------------
/*
 * Internal variables for class.
 */

public ASN1Null c_sequence;
public ASN1Null c_noRsName;
public ASN1Integer c_tooMany;
public ASN1Null c_incompatible;
public ASN1Null c_generic;
public ASN1Null c_dbSpecific;
public SortElement c_sortElement;
public ASN1Integer c_key;
public ASN1Null c_action;
public ASN1Integer c_illegal;
public InternationalString c_inputTooLarge[];
public ASN1Null c_aggregateTooLarge;

//----------------------------------------------------------------
/*
 * Enumerated constants for class.
 */

// Enumerated constants for key
public static final int E_tooMany = 1;
public static final int E_duplicate = 2;

// Enumerated constants for illegal
public static final int E_relation = 1;
public static final int E_case = 2;
public static final int E_action = 3;
public static final int E_sort = 4;

} // DiagFormat_sort

//----------------------------------------------------------------
//EOF
